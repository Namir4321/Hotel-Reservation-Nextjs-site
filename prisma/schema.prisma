// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String      @id @default(uuid())
  firstName    String?
  lastName     String?
  username     String?     @unique
  email        String      @unique
  profileImage String?
  password     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  Property     Property[]
  Favourite    Favourite[]
  reviews      Review[]
  bookings     Booking[]
}

model Property {
  id          String      @id @default(uuid())
  name        String
  tagline     String
  category    String
  image       String
  country     String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  profile     Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId   String
  Favourite   Favourite[]
  reviews     Review[]
  bookings    Booking[]
}

model Favourite {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  profileId  String
  propertyId String
}

model Review {
  id         String   @id @default(uuid())
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId  String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Booking {
  id            String   @id @default(uuid())
  profile       Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId     String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
